#!/usr/bin/env bash
set -euo pipefail

# Get script directory for reliable path resolution
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source colors file safely
if [[ -z "${GREEN:-}" ]] && [[ -f "${SCRIPT_DIR}/utils/colors" ]]; then
    source "${SCRIPT_DIR}/utils/colors"
fi

# Function to display error and exit
die() {
    echo -e "${BOLD}${RED}‚ùå Error: $1${NC}" >&2
    exit 1
}

# Check if .env exists
if [[ ! -f "${SCRIPT_DIR}/.env" ]]; then
    die ".env file not found! Run setup script first."
fi

# Generate app key with fallbacks
echo -e "${BOLD}${YELLOW}üîë Generating new app key...${NC}"
if ! APP_KEY=$(openssl rand -hex 32 2>/dev/null || 
             (head -c 32 /dev/urandom 2>/dev/null | xxd -p -c 256) || 
             die "Failed to generate secure random key"); then
    die "Key generation failed"
fi

# Validate key length
if [[ ${#APP_KEY} -ne 64 ]]; then
    die "Invalid key length (${#APP_KEY} chars). Expected 64-character hex string."
fi

# Platform-safe sed replacement
echo -e "${BOLD}${YELLOW}üîë Updating .env file...${NC}"
if sed --version &>/dev/null; then
    # GNU sed (Linux)
    sed -i "s|APP_KEY=.*|APP_KEY=${APP_KEY}|" "${SCRIPT_DIR}/.env"
else
    # BSD sed (macOS)
    sed -i '' "s|APP_KEY=.*|APP_KEY=${APP_KEY}|" "${SCRIPT_DIR}/.env"
fi

echo -e "\n${GREEN}‚úì New app key generated: ${BOLD}${MAGENTA}${APP_KEY}${NC}"
echo -e "${YELLOW}‚ö†Ô∏è Update your API clients with this new key!${NC}"
